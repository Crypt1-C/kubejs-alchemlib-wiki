# Supported Recipe Types

## Atomizer

```javascript
event.recipes.alchemistry.atomizer(Fluid.of('minecraft:lava', 250), 'chemlib:beta_carotene');
```

## Compactor

```javascript
event.recipes.alchemistry.compactor("64x minecraft:nether_star", Item.of("minecraft:bedrock", 8));
```

## Combiner

```javascript
event.recipes.alchemistry.combiner([
    "32x minecraft:copper_ingot",
    "16x minecraft:iron_ingot",
    "minecraft:netherite_scrap"
], Item.of("minecraft:netherite_ingot"));
```

## Dissolver

```javascript
event.recipes.alchemistry.dissolver("minecraft:bedrock", 2, true)
    .withGroup(33.3, ["chemlib:water"])
    .withGroup(66.7, ["4x chemlib:iron", Item.of("chemlib:cobalt", 9)]);
```

* `rolls` - optional, default 1
* `weighted` - optional, default false

## Fission

```javascript
event.recipes.alchemistry.fission("minecraft:diamond", Item.of("minecraft:iron_ingot", 8), "20x minecraft:gold_ingot");
```

## Fusion

```javascript
event.recipes.alchemistry.fusion("minecraft:apple", Item.of("minecraft:dirt", 8), "20x minecraft:diamond");
```

## Liquifier

```javascript
event.recipes.alchemistry.liquifier("64x minecraft:nether_star", Fluid.of("minecraft:milk", 500));
```


# Custom Elements and Compounds

You can create custom elements and compound in scripts using `event.create` or `ElementItemBuilder`.


## Element Builder

```javascript
// Example: custom element
event.create("chemlib:test_element", "chemlib:element")
    .atomicNumber(167)
    .abbreviation("Tx")
    .chemicalGroup(20)
    .groupName("Custom Group")
    .period(10)
    .matterState(MatterType.SOLID)      // or .matterState("solid")
    .metalType(Metal.METAL)             // or .metalType("metal")
    .artificial()
    .elementColor("ff006a")             // no # needed at the start
    .withEffect("minecraft:saturation", 10, 2);
```

* `atomicNumber` - Atomic number of the element
* `abbreviation` - Chemical symbol
* `chemicalGroup` - Group number
* `groupName` - Group name
* `period` - Period number
* `matterState` - SOLID, LIQUID, GAS (see {{#MatterState}})
* `metalType` - METAL, METALLOID, NONMETAL (see {{#MetalType}})
* `artificial()` - Mark as synthetic element
* `elementColor` - Hex color
* `withEffect` - Status effect on player when held

---

## Compound Builder

```javascript
event.create('test_compound_solid', 'chemlib:compound')
    .matterState(Matter.SOLID)
    .description("Dev Testing Compound Description")
    .compoundColor("0000FF")
    .withComponent("carbonate", 3)
    .withComponent("test_element_solid", 4)
    .withComponent("test_element_liquid");
```

* `matterState` - SOLID, LIQUID, GAS (see {{#MatterState}})
* `description` - Text description
* `compoundColor` - Hex color
* `withComponent` - Items included in the compound
* `withEffect` - Status effects

---

# Utilities

### MatterState

> > > \#MatterState
> > > SOLID, LIQUID, GAS wrapper for convenience.
> > > <<<

### MetalType

> > > \#MetalType
> > > METAL, METALLOID, NONMETAL wrapper for convenience.
> > > <<<

### ChemicalElement

> > > \#ChemicalElement
> > > Provides functions to query properties of an ElementItem:

* `getAtomicNumber(itemStack)`
* `getAbbreviation(itemStack)`
* `getGroup(itemStack)`
* `getPeriod(itemStack)`
* `getMatterState(itemStack)`
* `getMetalType(itemStack)`
* `isArtificial(itemStack)`
* `getColor(itemStack)`
* `getEffects(itemStack)`
* `getGroupName(itemStack)`
* `isElement(itemStack)`
  <<<

### ChemicalCompound

> > > \#ChemicalCompound
> > > Provides functions to query properties of a CompoundItem:

* `getComponents(itemStack)`
* `getDescription(itemStack)`
* `getColor(itemStack)`
* `getEffects(itemStack)`
* `isCompound(itemStack)`
  <<<

---